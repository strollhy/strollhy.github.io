<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>strollhy.github.io</title>
   
   <link>http://localhost:4000</link>
   <description>好打码，不求甚解</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>S.O.L.I.D - 面向对象设计的5大原则</title>
	  <link>//solid-principle</link>
	  <author></author>
	  <pubDate>2019-01-01T04:08:00-08:00</pubDate>
	  <guid>//solid-principle</guid>
	  <description><![CDATA[
	     <p><a href="https://en.wikipedia.org/wiki/SOLID">S.O.L.I.D</a> 是面向对象设计（OOD）的头五大基本原则的首字母缩写，由俗称「鲍勃大叔」的 <a href="https://en.wikipedia.org/wiki/Robert_C._Martin">Robert C. Martin</a> 提出。</p>

<p>这些原则的核心思想是使程序更加易于维护、扩展和重构，同时也尽量避免代码异味。这五大原则分别为：</p>

<table>
  <thead>
    <tr>
      <th>缩写</th>
      <th>全称</th>
      <th>中文名</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>SRP</td>
      <td>The Single Responsibility Principle</td>
      <td>单一责任原则</td>
    </tr>
    <tr>
      <td>OCP</td>
      <td>The Open Closed Principle</td>
      <td>开放封闭原则</td>
    </tr>
    <tr>
      <td>LSP</td>
      <td>The Liskov Substitution Principle</td>
      <td>里氏替换原则</td>
    </tr>
    <tr>
      <td>ISP</td>
      <td>The Interface Segregation Principle</td>
      <td>接口分离原则</td>
    </tr>
    <tr>
      <td>DIP</td>
      <td>The Dependency Inversion Principle</td>
      <td>依赖倒置原则</td>
    </tr>
  </tbody>
</table>

<h2 id="单一责任原则-srp">单一责任原则 (SRP)</h2>
<blockquote>
  <p>A class should have one and only one reason to change. —— 一个类应该有且仅有一个被修改的理由。</p>
</blockquote>

<p><img src="/assets/images/SRP.png" alt="SRP" /></p>
<p style="text-align: center;"><a href="http://themoderndeveloper.com/principles/core-principles/single-responsibility-principle/">Image Source</a></p>

<p>就是说一个类应该只负责做好一件事（也就是只有一个被修改的理由）。举一个简单的例子：</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Ruby</span>
<span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
    <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">new</span>
    <span class="n">post</span><span class="p">.</span><span class="nf">content</span> <span class="o">=</span> <span class="no">CGI</span><span class="p">.</span><span class="nf">escapeHTML</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="nf">fullname</span> <span class="o">+</span> <span class="s2">": "</span> <span class="o">+</span> <span class="n">content</span><span class="p">)</span>
    <span class="n">post</span><span class="p">.</span><span class="nf">save!</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>在上面的create方法一共有四个被修改的理由：</p>
<ul>
  <li><code class="highlighter-rouge">post.content</code> 它默认了post这个对象有一个attribute叫content，那么以后如果post数据结构有变，比如我想改名content为text，我必须记得要同时更新这一地方。</li>
  <li><code class="highlighter-rouge">CGI.escapeHTML</code> 如果以后我想换成另一个库抑或不再需要escape用户输入，我都需要更改这行代码。</li>
  <li><code class="highlighter-rouge">user.fullname + ...</code> 这个属于数据样式定义，以后任何时候我需要更改存储数据的样式，我都需要碰触这行代码。</li>
  <li><code class="highlighter-rouge">post.save!</code>严格意义上讲，实际将数据存进数据库的这一行为应该算作另一个责任。此话怎讲？因为数据的存储可以涉及到很多负责的情况：存储可以出错——比如数据不有效或者数据库超）；数据可以需要预处理——比如在存入数据库之前我们需要进行复杂的运算；又或者数据并不需要存入数据库——而只是需要把数据模型化然后传到其他服务器。当涉及到以上情况时，数据存储可以轻松升级成为一个复杂的问题，因此在设计初期将它视为另一责任是有实际意义的。</li>
</ul>

<p>由上可以看出，这段代码异味较高，多个被修改理由意味着潜在的代码维护风险。最简单的修改方法就是将每个责任移出作为单独的逻辑：</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="k">def</span> <span class="nf">create_post</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
    <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">build_post</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
    <span class="n">post</span><span class="p">.</span><span class="nf">save!</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">build_post</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
    <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">new</span>
    <span class="n">post</span><span class="p">.</span><span class="nf">content</span> <span class="o">=</span> <span class="n">process_content</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
    <span class="n">post</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">process_content</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
    <span class="no">CGI</span><span class="p">.</span><span class="nf">escapeHTML</span><span class="p">(</span><span class="n">format_content</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">content</span><span class="p">))</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">format_content</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
    <span class="n">user</span><span class="p">.</span><span class="nf">fullname</span> <span class="o">+</span> <span class="s2">": "</span> <span class="o">+</span> <span class="n">content</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>P.S. 在实际应用中，MVC(Model/View/Controller) 模式就是遵循了单一责任原则。它将网站的责任分为了三大类：Model只关心网站存储的数据模型——这个数据长什么样，装什么内容，或者怎么跟数据库沟通；View只关心怎么展示数据——哪些数据需要展示，需要怎样展示等等；Controller则只关心如何根据用户指令存取数据——如何处理读取、检索、更改、添加、删除等指令。如此一来各个部分各司其职，即保证了方法里的高聚合度也保证了方法间的低耦合度。</p>

<h2 id="开放封闭原则-ocp">开放封闭原则 (OCP)</h2>
<blockquote>
  <p>Objects or entities should be open for extension, but closed for modification. —— 对象应该是可扩展，而不可修改的。即对扩展是开放的，而对修改是封闭的。</p>
</blockquote>

<p><img src="assets/images/OCP.jpg" alt="OCP" /></p>
<p style="text-align: center;"><a href="https://www.topjavatutorial.com/design-pattern/open-closed-principle/">Image Source</a></p>

<p>换句话说，也就是一个类/对象应该被设计成不可修改但可以被扩展。如此一来如果你想添加一个新的功能，你只需对已有的对象进行扩展而非修改。举一个例子：</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Ruby</span>
<span class="k">class</span> <span class="nc">PaymentHandler</span>
  <span class="k">def</span> <span class="nf">charge</span><span class="p">(</span><span class="n">payment</span><span class="p">)</span>
    <span class="k">if</span><span class="p">(</span><span class="n">payment</span><span class="p">.</span><span class="nf">get_type</span> <span class="o">==</span> <span class="no">CREDIT</span><span class="p">)</span>
      <span class="c1"># charge by credit card</span>
    <span class="k">elsif</span><span class="p">(</span><span class="n">payment</span><span class="p">.</span><span class="nf">get_type</span> <span class="o">==</span> <span class="no">DEBIT</span><span class="p">)</span>
      <span class="c1"># charge debit card</span>
    <span class="k">else</span>
      <span class="c1"># throw exception</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>在上面的支付例子中，我们的系统对用户提供支付方式进行检测从而确定用不同方式进行转账。但是如果以后我们想要支持新的支付方式，例如支付宝或者微信支付，那我们就不得不再“打开”这段代码并添加相应的<code class="highlighter-rouge">if..else</code>语句，如此代码会很容易长到几百甚至几千行，代码维护起来的开销也会越来越大。</p>

<p>比较好的做法是将不同的支付方式抽象为一个统一支付对象的子类，然后对每个子类的逻辑分别进行扩展：</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Ruby</span>
<span class="k">class</span> <span class="nc">PaymentHandler</span>
  <span class="k">def</span> <span class="nf">charge</span><span class="p">(</span><span class="n">payment_type</span><span class="p">)</span>
    <span class="n">payment</span> <span class="o">=</span> <span class="n">get_payment</span><span class="p">(</span><span class="n">payment_type</span><span class="p">)</span>
    <span class="n">payment</span><span class="p">.</span><span class="nf">charge</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Payment</span>
  <span class="k">def</span> <span class="nf">charge</span>
    <span class="c1"># Throw not-implemented exception</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Credit</span> <span class="o">&lt;</span> <span class="no">Payment</span>
  <span class="k">def</span> <span class="nf">charge</span>
    <span class="c1"># charge by credit card</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Debit</span> <span class="o">&lt;</span> <span class="no">Payment</span>
  <span class="k">def</span> <span class="nf">charge</span>
    <span class="c1"># charge by debit card</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>这样，新增支付方式只需要添加新的类，再通过使用工厂模式来根据不同的支付类型返回相应的支付类，从而最小化对现有对象的改动。</p>

<h2 id="里氏替换原则-lsp">里氏替换原则 (LSP)</h2>
<blockquote>
  <p>Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program. —— 在程序中的任何基类应该可以被其子类或派生类替换，并且不会导致程序的错误。</p>
</blockquote>

<p><img src="assets/images/LSP.png" alt="LSP" /></p>

<p>上图描述的就是一个经典的违法里氏替换例子：<br />
当一个鸭子看起来像只鸭子，叫起来像只鸭子，但是需要装电池，那么这样的建模就很可能不合理的。为什么不合理呢？因为如果这样设计的话，在你的代码中就极有可能出现需要检查鸭子类型的情况——因为我们有一种“特殊”的鸭子跟其他鸭子都不同，需要单独的逻辑来处理装电池的情况。这就导致了代码的异味。（P.S. 是不是觉得这种在代码中检查对象类型的情况似曾相识？是的，违反里氏替换原则也会常常连带违反开放封闭原则。所以当你发现上述症状的时候，也可以找找问题的根源是否是出在了建模上。）</p>

<h2 id="接口分离原则-isp">接口分离原则 (ISP)</h2>
<blockquote>
  <p>Clients should not be forced to depend on methods that they do not use. —— 客户端不应该被迫依赖它们不使用的方法。</p>
</blockquote>

<p><img src="assets/images/ISP.png" alt="ISP" /></p>

<p>即如果一个类的接口中包含了客户端不需要的方法，那么就违反了依赖倒置原则。因为客户端为了使用这一接口而有不得不实现它不需要的方法部分，例如下面的例子：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// Java</span>
<span class="kd">interface</span> <span class="nf">DuckBehavior</span> <span class="o">(</span>
  <span class="kt">void</span> <span class="nf">quack</span><span class="o">();</span>
  <span class="kt">void</span> <span class="nf">changeBattery</span><span class="o">();</span>
<span class="o">)</span>

<span class="kd">class</span> <span class="nc">Duck</span> <span class="kd">implements</span> <span class="n">DuckBehavior</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">();</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changeBattery</span><span class="o">();</span> <span class="o">{</span> <span class="c1">// do nothing! }</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">EletricDuck</span> <span class="kd">implements</span> <span class="n">DuckBehavior</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">();</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changeBattery</span><span class="o">();</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>正常的鸭子根本没有换电池的功能，但是由于实现了DuckBehavior，又不得不将changeBattery()实现成了空方法，虽然这个方法什么事也没有做。可想而知，当有很多鸭子都需要使用这个接口的时候，必然会造成大量的无用代码。改进的方法也同样简单，将接口拆分成更小和更具体的接口，这样每个客户端可以根据自己的情况来使用相对应的接口。</p>

<h2 id="依赖倒置原则-dip">依赖倒置原则 (DIP)</h2>
<blockquote>
  <p>Entities must depend on abstractions not on concretions. —— 实体必须依靠抽象而不是具体实现。</p>
</blockquote>

<p><img src="assets/images/DIP.jpg" alt="DIP" /></p>

<p>它表示高层次的模块不应该依赖于低层次的模块，它们都应该依赖于抽象。这个原则实际上就是开闭原则的实现策略。咱们再回头来看这个例子：</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Ruby</span>
<span class="k">class</span> <span class="nc">PaymentHandler</span>
  <span class="k">def</span> <span class="nf">charge</span><span class="p">(</span><span class="n">payment</span><span class="p">)</span>
    <span class="k">if</span><span class="p">(</span><span class="n">payment</span><span class="p">.</span><span class="nf">get_type</span> <span class="o">==</span> <span class="no">CREDIT</span><span class="p">)</span>
      <span class="no">CreditProcessor</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">payment</span><span class="p">).</span><span class="nf">charge</span>
    <span class="k">elsif</span><span class="p">(</span><span class="n">payment</span><span class="p">.</span><span class="nf">get_type</span> <span class="o">==</span> <span class="no">DEBIT</span><span class="p">)</span>
      <span class="no">DebitProcessor</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">payment</span><span class="p">).</span><span class="nf">charge</span>
    <span class="k">else</span>
      <span class="c1"># throw exception</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">CreditProcessor</span>
  <span class="o">...</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">DebitProcessor</span>
  <span class="o">...</span>
<span class="k">end</span></code></pre></figure>

<p>这样设计导致的结果就是PaymentHandler这一高层次模块依赖于两个低层次的Processor实现，因此违反了依赖导致原则。以后需要修改CreditProcessor或者DebitProcessor的时候，我们都需要打开PaymentHandler进行修改，因此也违反了开闭原则。改进的方法与开闭原则的方式相同，即定义一个抽象的类让子类继承，然后让高层模块仅依赖于这个抽象的类，从而实现去耦。</p>

<h2 id="结语">结语</h2>
<p>网上讨论S.O.L.I.D的文章有很多，但很多描述得不够详细和具体，希望这篇总结能够有所帮助。老实说，这些原则初看起来可能比较难以理解，但只要你能够开始使用并尝试并遵守其指导方针，它就会慢慢让你的代码变得更容易修改、扩展和重构，而不出任何问题。</p>

<h2 id="参考文章">参考文章</h2>
<ul>
  <li><a href="https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design">https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design</a></li>
  <li><a href="https://deviq.com/solid/">https://deviq.com/solid/</a></li>
  <li><a href="https://hackernoon.com/solid-principles-made-easy-67b1246bcdf">https://hackernoon.com/solid-principles-made-easy-67b1246bcdf</a></li>
  <li><a href="https://www.cnblogs.com/wuyuegb2312/p/7011708.html">https://www.cnblogs.com/wuyuegb2312/p/7011708.html</a></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
